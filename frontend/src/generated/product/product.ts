/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Kira Inventory API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeleteProductProductDeleteProductProductIdDelete200,
  HTTPValidationError,
  LowStockItemsProductLowStockItemsValueGet200,
  MyProductsProductMyProductsGetParams,
  ProductBase,
  ProductCreate,
  ProductOut,
  ProductUpdate,
  ProductsAvailableProductProductsAvailableGet200,
  TopLucrativeProductsProductTopLucrativeProductsGet200,
} from "../orval.schemas";

import { apiFetcher } from "../../core/api";

/**
 * @summary Addproduct
 */
export const addProductProductAddProductPost = (
  productCreate: ProductCreate,
  signal?: AbortSignal,
) => {
  return apiFetcher<ProductBase>({
    url: `/product/add-product/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: productCreate,
    signal,
  });
};

export const getAddProductProductAddProductPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProductProductAddProductPost>>,
    TError,
    { data: ProductCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addProductProductAddProductPost>>,
  TError,
  { data: ProductCreate },
  TContext
> => {
  const mutationKey = ["addProductProductAddProductPost"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProductProductAddProductPost>>,
    { data: ProductCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addProductProductAddProductPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddProductProductAddProductPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProductProductAddProductPost>>
>;
export type AddProductProductAddProductPostMutationBody = ProductCreate;
export type AddProductProductAddProductPostMutationError = HTTPValidationError;

/**
 * @summary Addproduct
 */
export const useAddProductProductAddProductPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addProductProductAddProductPost>>,
      TError,
      { data: ProductCreate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addProductProductAddProductPost>>,
  TError,
  { data: ProductCreate },
  TContext
> => {
  const mutationOptions =
    getAddProductProductAddProductPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Updateproduct
 */
export const updateProductProductUpdateProductProductIdPatch = (
  productId: number,
  productUpdate: ProductUpdate,
) => {
  return apiFetcher<ProductOut>({
    url: `/product/update-product/${productId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: productUpdate,
  });
};

export const getUpdateProductProductUpdateProductProductIdPatchMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateProductProductUpdateProductProductIdPatch>
      >,
      TError,
      { productId: number; data: ProductUpdate },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof updateProductProductUpdateProductProductIdPatch>>,
    TError,
    { productId: number; data: ProductUpdate },
    TContext
  > => {
    const mutationKey = ["updateProductProductUpdateProductProductIdPatch"];
    const { mutation: mutationOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateProductProductUpdateProductProductIdPatch>
      >,
      { productId: number; data: ProductUpdate }
    > = (props) => {
      const { productId, data } = props ?? {};

      return updateProductProductUpdateProductProductIdPatch(productId, data);
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateProductProductUpdateProductProductIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateProductProductUpdateProductProductIdPatch>>
  >;
export type UpdateProductProductUpdateProductProductIdPatchMutationBody =
  ProductUpdate;
export type UpdateProductProductUpdateProductProductIdPatchMutationError =
  HTTPValidationError;

/**
 * @summary Updateproduct
 */
export const useUpdateProductProductUpdateProductProductIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateProductProductUpdateProductProductIdPatch>
      >,
      TError,
      { productId: number; data: ProductUpdate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateProductProductUpdateProductProductIdPatch>>,
  TError,
  { productId: number; data: ProductUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateProductProductUpdateProductProductIdPatchMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Inactiveproduct
 */
export const inactiveProductProductInactiveProductProductIdPut = (
  productId: number,
) => {
  return apiFetcher<ProductOut>({
    url: `/product/inactive-product/${productId}`,
    method: "PUT",
  });
};

export const getInactiveProductProductInactiveProductProductIdPutMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>
      >,
      TError,
      { productId: number },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>
    >,
    TError,
    { productId: number },
    TContext
  > => {
    const mutationKey = ["inactiveProductProductInactiveProductProductIdPut"];
    const { mutation: mutationOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>
      >,
      { productId: number }
    > = (props) => {
      const { productId } = props ?? {};

      return inactiveProductProductInactiveProductProductIdPut(productId);
    };

    return { mutationFn, ...mutationOptions };
  };

export type InactiveProductProductInactiveProductProductIdPutMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>
    >
  >;

export type InactiveProductProductInactiveProductProductIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Inactiveproduct
 */
export const useInactiveProductProductInactiveProductProductIdPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>
      >,
      TError,
      { productId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof inactiveProductProductInactiveProductProductIdPut>>,
  TError,
  { productId: number },
  TContext
> => {
  const mutationOptions =
    getInactiveProductProductInactiveProductProductIdPutMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Deleteproduct
 */
export const deleteProductProductDeleteProductProductIdDelete = (
  productId: number,
) => {
  return apiFetcher<DeleteProductProductDeleteProductProductIdDelete200>({
    url: `/product/delete-product/${productId}`,
    method: "DELETE",
  });
};

export const getDeleteProductProductDeleteProductProductIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>
      >,
      TError,
      { productId: number },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>
    >,
    TError,
    { productId: number },
    TContext
  > => {
    const mutationKey = ["deleteProductProductDeleteProductProductIdDelete"];
    const { mutation: mutationOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>
      >,
      { productId: number }
    > = (props) => {
      const { productId } = props ?? {};

      return deleteProductProductDeleteProductProductIdDelete(productId);
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteProductProductDeleteProductProductIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>>
  >;

export type DeleteProductProductDeleteProductProductIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Deleteproduct
 */
export const useDeleteProductProductDeleteProductProductIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>
      >,
      TError,
      { productId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteProductProductDeleteProductProductIdDelete>>,
  TError,
  { productId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteProductProductDeleteProductProductIdDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Myproducts
 */
export const myProductsProductMyProductsGet = (
  params?: MyProductsProductMyProductsGetParams,
  signal?: AbortSignal,
) => {
  return apiFetcher<unknown>({
    url: `/product/my-products/`,
    method: "GET",
    params,
    signal,
  });
};

export const getMyProductsProductMyProductsGetQueryKey = (
  params?: MyProductsProductMyProductsGetParams,
) => {
  return [`/product/my-products/`, ...(params ? [params] : [])] as const;
};

export const getMyProductsProductMyProductsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
  TError = HTTPValidationError,
>(
  params?: MyProductsProductMyProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMyProductsProductMyProductsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof myProductsProductMyProductsGet>>
  > = ({ signal }) => myProductsProductMyProductsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MyProductsProductMyProductsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof myProductsProductMyProductsGet>>
>;
export type MyProductsProductMyProductsGetQueryError = HTTPValidationError;

export function useMyProductsProductMyProductsGet<
  TData = Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | MyProductsProductMyProductsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
          TError,
          Awaited<ReturnType<typeof myProductsProductMyProductsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMyProductsProductMyProductsGet<
  TData = Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
  TError = HTTPValidationError,
>(
  params?: MyProductsProductMyProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
          TError,
          Awaited<ReturnType<typeof myProductsProductMyProductsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMyProductsProductMyProductsGet<
  TData = Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
  TError = HTTPValidationError,
>(
  params?: MyProductsProductMyProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Myproducts
 */

export function useMyProductsProductMyProductsGet<
  TData = Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
  TError = HTTPValidationError,
>(
  params?: MyProductsProductMyProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof myProductsProductMyProductsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMyProductsProductMyProductsGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Productsavailable
 */
export const productsAvailableProductProductsAvailableGet = (
  signal?: AbortSignal,
) => {
  return apiFetcher<ProductsAvailableProductProductsAvailableGet200>({
    url: `/product/products-available/`,
    method: "GET",
    signal,
  });
};

export const getProductsAvailableProductProductsAvailableGetQueryKey = () => {
  return [`/product/products-available/`] as const;
};

export const getProductsAvailableProductProductsAvailableGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof productsAvailableProductProductsAvailableGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsAvailableProductProductsAvailableGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getProductsAvailableProductProductsAvailableGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsAvailableProductProductsAvailableGet>>
  > = ({ signal }) => productsAvailableProductProductsAvailableGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsAvailableProductProductsAvailableGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProductsAvailableProductProductsAvailableGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof productsAvailableProductProductsAvailableGet>>
  >;
export type ProductsAvailableProductProductsAvailableGetQueryError = unknown;

export function useProductsAvailableProductProductsAvailableGet<
  TData = Awaited<
    ReturnType<typeof productsAvailableProductProductsAvailableGet>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof productsAvailableProductProductsAvailableGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof productsAvailableProductProductsAvailableGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof productsAvailableProductProductsAvailableGet>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductsAvailableProductProductsAvailableGet<
  TData = Awaited<
    ReturnType<typeof productsAvailableProductProductsAvailableGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof productsAvailableProductProductsAvailableGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof productsAvailableProductProductsAvailableGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof productsAvailableProductProductsAvailableGet>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductsAvailableProductProductsAvailableGet<
  TData = Awaited<
    ReturnType<typeof productsAvailableProductProductsAvailableGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof productsAvailableProductProductsAvailableGet>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Productsavailable
 */

export function useProductsAvailableProductProductsAvailableGet<
  TData = Awaited<
    ReturnType<typeof productsAvailableProductProductsAvailableGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof productsAvailableProductProductsAvailableGet>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getProductsAvailableProductProductsAvailableGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Toplucrativeproducts
 */
export const topLucrativeProductsProductTopLucrativeProductsGet = (
  signal?: AbortSignal,
) => {
  return apiFetcher<TopLucrativeProductsProductTopLucrativeProductsGet200>({
    url: `/product/top-lucrative-products/`,
    method: "GET",
    signal,
  });
};

export const getTopLucrativeProductsProductTopLucrativeProductsGetQueryKey =
  () => {
    return [`/product/top-lucrative-products/`] as const;
  };

export const getTopLucrativeProductsProductTopLucrativeProductsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
    >,
    TError = unknown,
  >(options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
        >,
        TError,
        TData
      >
    >;
  }) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getTopLucrativeProductsProductTopLucrativeProductsGetQueryKey();

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
      >
    > = ({ signal }) =>
      topLucrativeProductsProductTopLucrativeProductsGet(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type TopLucrativeProductsProductTopLucrativeProductsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
    >
  >;
export type TopLucrativeProductsProductTopLucrativeProductsGetQueryError =
  unknown;

export function useTopLucrativeProductsProductTopLucrativeProductsGet<
  TData = Awaited<
    ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof topLucrativeProductsProductTopLucrativeProductsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof topLucrativeProductsProductTopLucrativeProductsGet
            >
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTopLucrativeProductsProductTopLucrativeProductsGet<
  TData = Awaited<
    ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof topLucrativeProductsProductTopLucrativeProductsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof topLucrativeProductsProductTopLucrativeProductsGet
            >
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTopLucrativeProductsProductTopLucrativeProductsGet<
  TData = Awaited<
    ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Toplucrativeproducts
 */

export function useTopLucrativeProductsProductTopLucrativeProductsGet<
  TData = Awaited<
    ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof topLucrativeProductsProductTopLucrativeProductsGet>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTopLucrativeProductsProductTopLucrativeProductsGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Estimatedprofit
 */
export const estimatedProfitProductEstimatedProfitGet = (
  signal?: AbortSignal,
) => {
  return apiFetcher<unknown>({
    url: `/product/estimated-profit/`,
    method: "GET",
    signal,
  });
};

export const getEstimatedProfitProductEstimatedProfitGetQueryKey = () => {
  return [`/product/estimated-profit/`] as const;
};

export const getEstimatedProfitProductEstimatedProfitGetQueryOptions = <
  TData = Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEstimatedProfitProductEstimatedProfitGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>
  > = ({ signal }) => estimatedProfitProductEstimatedProfitGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EstimatedProfitProductEstimatedProfitGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>
>;
export type EstimatedProfitProductEstimatedProfitGetQueryError = unknown;

export function useEstimatedProfitProductEstimatedProfitGet<
  TData = Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
          TError,
          Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEstimatedProfitProductEstimatedProfitGet<
  TData = Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
          TError,
          Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEstimatedProfitProductEstimatedProfitGet<
  TData = Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Estimatedprofit
 */

export function useEstimatedProfitProductEstimatedProfitGet<
  TData = Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof estimatedProfitProductEstimatedProfitGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getEstimatedProfitProductEstimatedProfitGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Lowstockitems
 */
export const lowStockItemsProductLowStockItemsValueGet = (
  value: number,
  signal?: AbortSignal,
) => {
  return apiFetcher<LowStockItemsProductLowStockItemsValueGet200>({
    url: `/product/low-stock-items/${value}`,
    method: "GET",
    signal,
  });
};

export const getLowStockItemsProductLowStockItemsValueGetQueryKey = (
  value?: number,
) => {
  return [`/product/low-stock-items/${value}`] as const;
};

export const getLowStockItemsProductLowStockItemsValueGetQueryOptions = <
  TData = Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
  TError = HTTPValidationError,
>(
  value: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getLowStockItemsProductLowStockItemsValueGetQueryKey(value);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>
  > = ({ signal }) => lowStockItemsProductLowStockItemsValueGet(value, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!value,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type LowStockItemsProductLowStockItemsValueGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>
>;
export type LowStockItemsProductLowStockItemsValueGetQueryError =
  HTTPValidationError;

export function useLowStockItemsProductLowStockItemsValueGet<
  TData = Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
  TError = HTTPValidationError,
>(
  value: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
          TError,
          Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLowStockItemsProductLowStockItemsValueGet<
  TData = Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
  TError = HTTPValidationError,
>(
  value: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
          TError,
          Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLowStockItemsProductLowStockItemsValueGet<
  TData = Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
  TError = HTTPValidationError,
>(
  value: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Lowstockitems
 */

export function useLowStockItemsProductLowStockItemsValueGet<
  TData = Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
  TError = HTTPValidationError,
>(
  value: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lowStockItemsProductLowStockItemsValueGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getLowStockItemsProductLowStockItemsValueGetQueryOptions(
    value,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
