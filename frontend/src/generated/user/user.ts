/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Kira Inventory API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdvancedUsersProfileUpdate,
  ChangeUserEmailUserChangeEmailPut200,
  ChangeUserEmailUserChangeEmailPutParams,
  ChangeUserPasswordUserChangePasswordPut200,
  HTTPValidationError,
  LastLoginUserMyLastLoginGet200,
  UpdateUserProfileUserUpdateUserPatch200,
  UserChangePassword,
} from "../orval.schemas";

import { apiFetcher } from "../../core/api";

/**
 * @summary Updateuserprofile
 */
export const updateUserProfileUserUpdateUserPatch = (
  advancedUsersProfileUpdate: AdvancedUsersProfileUpdate,
) => {
  return apiFetcher<UpdateUserProfileUserUpdateUserPatch200>({
    url: `/user/update-user/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: advancedUsersProfileUpdate,
  });
};

export const getUpdateUserProfileUserUpdateUserPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>,
    TError,
    { data: AdvancedUsersProfileUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>,
  TError,
  { data: AdvancedUsersProfileUpdate },
  TContext
> => {
  const mutationKey = ["updateUserProfileUserUpdateUserPatch"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>,
    { data: AdvancedUsersProfileUpdate }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserProfileUserUpdateUserPatch(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserProfileUserUpdateUserPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>
>;
export type UpdateUserProfileUserUpdateUserPatchMutationBody =
  AdvancedUsersProfileUpdate;
export type UpdateUserProfileUserUpdateUserPatchMutationError =
  HTTPValidationError;

/**
 * @summary Updateuserprofile
 */
export const useUpdateUserProfileUserUpdateUserPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>,
      TError,
      { data: AdvancedUsersProfileUpdate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserProfileUserUpdateUserPatch>>,
  TError,
  { data: AdvancedUsersProfileUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateUserProfileUserUpdateUserPatchMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Changeuseremail
 */
export const changeUserEmailUserChangeEmailPut = (
  params: ChangeUserEmailUserChangeEmailPutParams,
) => {
  return apiFetcher<ChangeUserEmailUserChangeEmailPut200>({
    url: `/user/change-email/`,
    method: "PUT",
    params,
  });
};

export const getChangeUserEmailUserChangeEmailPutMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>,
    TError,
    { params: ChangeUserEmailUserChangeEmailPutParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>,
  TError,
  { params: ChangeUserEmailUserChangeEmailPutParams },
  TContext
> => {
  const mutationKey = ["changeUserEmailUserChangeEmailPut"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>,
    { params: ChangeUserEmailUserChangeEmailPutParams }
  > = (props) => {
    const { params } = props ?? {};

    return changeUserEmailUserChangeEmailPut(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangeUserEmailUserChangeEmailPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>
>;

export type ChangeUserEmailUserChangeEmailPutMutationError =
  HTTPValidationError;

/**
 * @summary Changeuseremail
 */
export const useChangeUserEmailUserChangeEmailPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>,
      TError,
      { params: ChangeUserEmailUserChangeEmailPutParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof changeUserEmailUserChangeEmailPut>>,
  TError,
  { params: ChangeUserEmailUserChangeEmailPutParams },
  TContext
> => {
  const mutationOptions =
    getChangeUserEmailUserChangeEmailPutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Changeuserpassword
 */
export const changeUserPasswordUserChangePasswordPut = (
  userChangePassword: UserChangePassword,
) => {
  return apiFetcher<ChangeUserPasswordUserChangePasswordPut200>({
    url: `/user/change-password/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: userChangePassword,
  });
};

export const getChangeUserPasswordUserChangePasswordPutMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>,
    TError,
    { data: UserChangePassword },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>,
  TError,
  { data: UserChangePassword },
  TContext
> => {
  const mutationKey = ["changeUserPasswordUserChangePasswordPut"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>,
    { data: UserChangePassword }
  > = (props) => {
    const { data } = props ?? {};

    return changeUserPasswordUserChangePasswordPut(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangeUserPasswordUserChangePasswordPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>
>;
export type ChangeUserPasswordUserChangePasswordPutMutationBody =
  UserChangePassword;
export type ChangeUserPasswordUserChangePasswordPutMutationError =
  HTTPValidationError;

/**
 * @summary Changeuserpassword
 */
export const useChangeUserPasswordUserChangePasswordPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>,
      TError,
      { data: UserChangePassword },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof changeUserPasswordUserChangePasswordPut>>,
  TError,
  { data: UserChangePassword },
  TContext
> => {
  const mutationOptions =
    getChangeUserPasswordUserChangePasswordPutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Lastlogin
 */
export const lastLoginUserMyLastLoginGet = (signal?: AbortSignal) => {
  return apiFetcher<LastLoginUserMyLastLoginGet200>({
    url: `/user/my-last-login/`,
    method: "GET",
    signal,
  });
};

export const getLastLoginUserMyLastLoginGetQueryKey = () => {
  return [`/user/my-last-login/`] as const;
};

export const getLastLoginUserMyLastLoginGetQueryOptions = <
  TData = Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getLastLoginUserMyLastLoginGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>
  > = ({ signal }) => lastLoginUserMyLastLoginGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type LastLoginUserMyLastLoginGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>
>;
export type LastLoginUserMyLastLoginGetQueryError = unknown;

export function useLastLoginUserMyLastLoginGet<
  TData = Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
          TError,
          Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLastLoginUserMyLastLoginGet<
  TData = Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
          TError,
          Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLastLoginUserMyLastLoginGet<
  TData = Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Lastlogin
 */

export function useLastLoginUserMyLastLoginGet<
  TData = Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof lastLoginUserMyLastLoginGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getLastLoginUserMyLastLoginGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
