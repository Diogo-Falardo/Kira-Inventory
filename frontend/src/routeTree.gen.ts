/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserpanelRouteImport } from './routes/userpanel'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UserpanelIndexRouteImport } from './routes/userpanel/index'
import { Route as UserpanelUserProfileRouteImport } from './routes/userpanel/userProfile'
import { Route as UserpanelUserProductRouteImport } from './routes/userpanel/userProduct'
import { Route as UserpanelUserDashboardRouteImport } from './routes/userpanel/userDashboard'

const UserpanelRoute = UserpanelRouteImport.update({
  id: '/userpanel',
  path: '/userpanel',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserpanelIndexRoute = UserpanelIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserpanelRoute,
} as any)
const UserpanelUserProfileRoute = UserpanelUserProfileRouteImport.update({
  id: '/userProfile',
  path: '/userProfile',
  getParentRoute: () => UserpanelRoute,
} as any)
const UserpanelUserProductRoute = UserpanelUserProductRouteImport.update({
  id: '/userProduct',
  path: '/userProduct',
  getParentRoute: () => UserpanelRoute,
} as any)
const UserpanelUserDashboardRoute = UserpanelUserDashboardRouteImport.update({
  id: '/userDashboard',
  path: '/userDashboard',
  getParentRoute: () => UserpanelRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/userpanel': typeof UserpanelRouteWithChildren
  '/userpanel/userDashboard': typeof UserpanelUserDashboardRoute
  '/userpanel/userProduct': typeof UserpanelUserProductRoute
  '/userpanel/userProfile': typeof UserpanelUserProfileRoute
  '/userpanel/': typeof UserpanelIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/userpanel/userDashboard': typeof UserpanelUserDashboardRoute
  '/userpanel/userProduct': typeof UserpanelUserProductRoute
  '/userpanel/userProfile': typeof UserpanelUserProfileRoute
  '/userpanel': typeof UserpanelIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/userpanel': typeof UserpanelRouteWithChildren
  '/userpanel/userDashboard': typeof UserpanelUserDashboardRoute
  '/userpanel/userProduct': typeof UserpanelUserProductRoute
  '/userpanel/userProfile': typeof UserpanelUserProfileRoute
  '/userpanel/': typeof UserpanelIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/userpanel'
    | '/userpanel/userDashboard'
    | '/userpanel/userProduct'
    | '/userpanel/userProfile'
    | '/userpanel/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/userpanel/userDashboard'
    | '/userpanel/userProduct'
    | '/userpanel/userProfile'
    | '/userpanel'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/userpanel'
    | '/userpanel/userDashboard'
    | '/userpanel/userProduct'
    | '/userpanel/userProfile'
    | '/userpanel/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  UserpanelRoute: typeof UserpanelRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/userpanel': {
      id: '/userpanel'
      path: '/userpanel'
      fullPath: '/userpanel'
      preLoaderRoute: typeof UserpanelRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/userpanel/': {
      id: '/userpanel/'
      path: '/'
      fullPath: '/userpanel/'
      preLoaderRoute: typeof UserpanelIndexRouteImport
      parentRoute: typeof UserpanelRoute
    }
    '/userpanel/userProfile': {
      id: '/userpanel/userProfile'
      path: '/userProfile'
      fullPath: '/userpanel/userProfile'
      preLoaderRoute: typeof UserpanelUserProfileRouteImport
      parentRoute: typeof UserpanelRoute
    }
    '/userpanel/userProduct': {
      id: '/userpanel/userProduct'
      path: '/userProduct'
      fullPath: '/userpanel/userProduct'
      preLoaderRoute: typeof UserpanelUserProductRouteImport
      parentRoute: typeof UserpanelRoute
    }
    '/userpanel/userDashboard': {
      id: '/userpanel/userDashboard'
      path: '/userDashboard'
      fullPath: '/userpanel/userDashboard'
      preLoaderRoute: typeof UserpanelUserDashboardRouteImport
      parentRoute: typeof UserpanelRoute
    }
  }
}

interface UserpanelRouteChildren {
  UserpanelUserDashboardRoute: typeof UserpanelUserDashboardRoute
  UserpanelUserProductRoute: typeof UserpanelUserProductRoute
  UserpanelUserProfileRoute: typeof UserpanelUserProfileRoute
  UserpanelIndexRoute: typeof UserpanelIndexRoute
}

const UserpanelRouteChildren: UserpanelRouteChildren = {
  UserpanelUserDashboardRoute: UserpanelUserDashboardRoute,
  UserpanelUserProductRoute: UserpanelUserProductRoute,
  UserpanelUserProfileRoute: UserpanelUserProfileRoute,
  UserpanelIndexRoute: UserpanelIndexRoute,
}

const UserpanelRouteWithChildren = UserpanelRoute._addFileChildren(
  UserpanelRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  UserpanelRoute: UserpanelRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
